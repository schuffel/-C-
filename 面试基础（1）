new与delete, malloc 与 free
----------------
new的用法：
---
int *ptr = new int(1);//表示动态分配一个int，初始化为1
int *ptr = new int[1];//表示动态分配一个int数组，数组大小为1；
1.C++中通过new关键字进行动态内存申请
2.C++中的动态内存是基于类型进行的
3.delete关键字用于内存释放。
Type* pointer = new Type;
//...
delete pointer;

foo = new (nothrow) int [5];
if (foo == nullptr) {
  // error assigning memory. Take measures.
}
----
malloc与free的用法
----

int *p = (int *) malloc ( sizeof(int) * length);


两者之间的区别：
new关键字是C++的一部分	malloc是由C库提供的函数
new以具体类型为单位进行内存分配	malloc以字节为单位进行内存分配
new在申请单个类型变量时可进行初始化	malloc不具备内存初始化的特性


const成员函数 + mutable
----------
我们知道，如果类的成员函数不会改变对象的状态，那么这个成员函数一般会声明成const的。
但是，有些时候，我们需要在const的函数里面修改一些跟类状态无关的数据成员，那么这个数据成员就应该被mutalbe来修饰。
for example
---------
class CTextBlock{
public:
  ...
  std::size_t length() const;
private:
  char* pText;
  mutable std::size_t textLength;
  mutable bool lengthIsVaild;
};
std::size_t length() const{
  if(!lengthIsVaild){
    textLength = std::strlen(pText);   //在const函数里面给textLength赋值, 主要原因是mutable
    lengthIsVaild = true;
  }
  return textLength;
}
