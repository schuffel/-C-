1.智能指针
我们知道全局对象在程序启动的时候分配，在程序结束时销毁。对于局部自动对象，当我们进入定义所在的程序时被创建，
离开时销毁。局部static对象在第一次使用前分配，在程序结束时销毁。
而对于动态分配对象，标准库里面定义了两个智能指针类型来管理动态分配的对象。
shared_ptr类和unique_ptr类，shared_ptr允许多个指针指向同一个对象，unique_ptr则独占所指向的对象。
程序不知道自己要使用多少对象，对象的类型，程序在多个对象间共享数据。


2.多态
可以简单的概括为“一个接口，多种方法”，它是核心概念。有两种多态性：编译时多态性，运行时多态性。
a.编译时多态性（静态多态）：通过重载函数实现，先期联编
b.运行时多态（动态多态）  ：通过虚函数实现：滞后联编
多态的常见用法就是声明基类类型指针，利用该指针指向任意一个子类对象，调用相应的虚函数。
从而根据指向的子类的不同而实现不同的方法。
多态的目的：封装可以使得代码模块化，继承可以存在的代码，目的是代码重用。
也就是接口重用，也即，不论传递过来的究竟是类的哪个对象，函数可以通过一个接口
调用到适应各自对象的方法。
重写（覆盖）， 重载， 重定义
重写：一般发生在子类和父类继承关系之间。子类重新定义父类中有相同名称和参数的虚函数。
重载：函数名相同，参数不同。
重定义(隐藏)：
  a.如果派生类的函数和基类的函数同名，但是参数不同，此时，不管有无virtual，基类的函数被隐藏。（注意别与重载混淆，重载是在同一个类中发生）
  b.如果派生类的函数与基类的函数同名，并且参数也相同，但是基类函数没有vitual关键字，此时，基类的函数被隐藏（如果相同有Virtual就是重写(覆盖)了）
  
1.只有类的成员函数才能声明为虚函数，虚函数仅适用于有继承关系的类对象。普通函数不能声明为虚函数。
2.静态成员函数不能是虚函数，因为静态成员函数不受限于某个对象。
3.内联函数（inline）不能是虚函数，因为内联函数不能在运行中动态确定位置。
4.构造函数不能是虚函数。
5.析构函数可以是虚函数，而且建议声明为虚函数。
总结为：在基类与子类函数名相同的前提下，根据参数是否相同、是否具有vritual关键字，可分为4种情况：

参数相同、有virtual关键字：多态重写；
参数相同、无virtual关键字：隐藏；与重写区分。
参数不同、有virtual关键字：隐藏；与重载区分。
参数不同、无virtual关键字：隐藏；与重载区分。
